import sys

class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)] for row in range(vertices)]

    def printSolution(self, dist):
        print("Vertex \tDistance from Source")
        for node in range(self.V):
            print(node, "\t", dist[node])

    def minDistance(self, dist, sptSet):
        min = sys.maxsize
        for u in range(self.V):
            if dist[u] < min and sptSet[u] == False:
                min = dist[u]
                min_index = u
        return min_index

    def dijkstra(self, src):
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        sptSet = [False] * self.V
        for cout in range(self.V):
            x = self.minDistance(dist, sptSet)
            sptSet[x] = True
            for y in range(self.V):
                if self.graph[x][y] > 0 and sptSet[y] == False and dist[y] > dist[x] + self.graph[x][y]:
                    dist[y] = dist[x] + self.graph[x][y]
        self.printSolution(dist)

if __name__ == "__main__":
    vertices = int(input("Enter the number of vertices: "))
    graph = []
    print("Enter the graph matrix:")
    for i in range(vertices):
        row = list(map(int, input().split()))
        graph.append(row)
    g = Graph(vertices)
    g.graph = graph
    src = int(input("Enter the source vertex: "))
    g.dijkstra(src)



Enter the number of vertices: 5
Enter the graph matrix:
0 2 4 0 0
2 0 3 7 0
4 3 0 1 5
0 7 1 0 3
0 0 5 3 0
Enter the source vertex: 0
Vertex Distance from Source
0 0
1 2
2 4
3 5
4 8